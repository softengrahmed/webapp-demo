# ============================================================================
# AWS Serverless Infrastructure Configuration
# ============================================================================
# Description: AWS Lambda and API Gateway configuration for serverless deployment
# Version: 1.0.0
# ============================================================================

service: webapp-demo
provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 256
  timeout: 30
  environment:
    NODE_ENV: ${self:provider.stage}
    APP_VERSION: ${env:APP_VERSION, '1.0.0'}

functions:
  api:
    handler: dist/apps/api/main.handler
    memorySize: ${self:custom.memorySize.${self:provider.stage}}
    timeout: 30
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
    environment:
      DATABASE_URL: ${ssm:/webapp-demo/${self:provider.stage}/database-url~true}
      JWT_SECRET: ${ssm:/webapp-demo/${self:provider.stage}/jwt-secret~true}

custom:
  memorySize:
    dev: 256
    staging: 512
    prod: 1024
  
  aurora:
    dev:
      minCapacity: 0.5
      maxCapacity: 1
      autoPause: true
      secondsUntilAutoPause: 300
    staging:
      minCapacity: 0.5
      maxCapacity: 4
      autoPause: true
      secondsUntilAutoPause: 900
    prod:
      minCapacity: 1
      maxCapacity: 8
      autoPause: false

resources:
  Resources:
    # Aurora Serverless v2 Database
    AuroraCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineMode: provisioned
        EngineVersion: '14.6'
        DatabaseName: webappdb
        MasterUsername: dbadmin
        MasterUserPassword: !Sub '{{resolve:secretsmanager:webapp-demo-${self:provider.stage}-db-password}}'
        ServerlessV2ScalingConfiguration:
          MinCapacity: ${self:custom.aurora.${self:provider.stage}.minCapacity}
          MaxCapacity: ${self:custom.aurora.${self:provider.stage}.maxCapacity}
        EnableHttpEndpoint: true
        StorageEncrypted: true
        DeletionProtection: ${self:provider.stage == 'prod'}

    # S3 Bucket for Artifacts
    ArtifactsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: webapp-demo-artifacts-${self:provider.stage}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldArtifacts
              Status: Enabled
              ExpirationInDays: ${self:custom.retentionDays.${self:provider.stage}}
            - Id: TransitionToIA
              Status: Enabled
              Transitions:
                - TransitionInDays: 30
                  StorageClass: STANDARD_IA
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # CloudWatch Log Groups
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-api
        RetentionInDays: ${self:custom.logRetention.${self:provider.stage}}

  custom:
    retentionDays:
      dev: 7
      staging: 14
      prod: 30
    
    logRetention:
      dev: 7
      staging: 30
      prod: 90

  Outputs:
    ApiUrl:
      Description: API Gateway URL
      Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}'
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url
    
    DatabaseEndpoint:
      Description: Aurora Database Endpoint
      Value: !GetAtt AuroraCluster.Endpoint.Address
      Export:
        Name: ${self:service}-${self:provider.stage}-db-endpoint