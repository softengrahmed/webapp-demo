# ============================================================================
# Manual Cleanup Workflow
# ============================================================================
# Description: Manually trigger cleanup of artifacts and caches
# Version: 1.0.0
# ============================================================================

name: Manual Cleanup

on:
  workflow_dispatch:
    inputs:
      cleanup-artifacts:
        description: 'Clean up old artifacts'
        required: false
        default: true
        type: boolean
      cleanup-cache:
        description: 'Clean up GitHub Actions cache'
        required: false
        default: true
        type: boolean
      retention-days:
        description: 'Keep artifacts newer than (days)'
        required: false
        default: '7'
        type: string
      dry-run:
        description: 'Dry run (no actual deletion)'
        required: false
        default: false
        type: boolean

permissions:
  actions: write
  contents: read

jobs:
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup Configuration
        run: |
          echo "ðŸ§¹ Cleanup Configuration:"
          echo "  - Cleanup Artifacts: ${{ inputs.cleanup-artifacts }}"
          echo "  - Cleanup Cache: ${{ inputs.cleanup-cache }}"
          echo "  - Retention Days: ${{ inputs.retention-days }}"
          echo "  - Dry Run: ${{ inputs.dry-run }}"

      - name: Clean Old Artifacts
        if: inputs.cleanup-artifacts
        uses: actions/github-script@v7
        with:
          script: |
            console.log('ðŸ“¦ Cleaning old artifacts...');
            
            const dryRun = ${{ inputs.dry-run }};
            const retentionDays = parseInt('${{ inputs.retention-days }}');
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
            
            console.log(`Cutoff date: ${cutoffDate.toISOString()}`);
            
            let deletedCount = 0;
            let skippedCount = 0;
            let totalSize = 0;
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                console.log(`${dryRun ? '[DRY RUN] Would delete' : 'Deleting'}: ${artifact.name} (${(artifact.size_in_bytes / 1024 / 1024).toFixed(2)} MB)`);
                totalSize += artifact.size_in_bytes;
                
                if (!dryRun) {
                  try {
                    await github.rest.actions.deleteArtifact({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      artifact_id: artifact.id
                    });
                    deletedCount++;
                  } catch (error) {
                    console.log(`Failed to delete ${artifact.name}: ${error.message}`);
                  }
                } else {
                  deletedCount++;
                }
              } else {
                skippedCount++;
              }
            }
            
            console.log(`\nðŸ“Š Summary:`);
            console.log(`  - ${dryRun ? 'Would delete' : 'Deleted'}: ${deletedCount} artifacts`);
            console.log(`  - Skipped: ${skippedCount} artifacts`);
            console.log(`  - Space ${dryRun ? 'to be' : ''} recovered: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);

      - name: Clean GitHub Actions Cache
        if: inputs.cleanup-cache
        uses: actions/github-script@v7
        with:
          script: |
            console.log('ðŸ’¾ Cleaning GitHub Actions cache...');
            
            const dryRun = ${{ inputs.dry-run }};
            
            try {
              const caches = await github.rest.actions.getActionsCacheList({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              console.log(`Found ${caches.data.total_count} cache entries`);
              
              let deletedCount = 0;
              for (const cache of caches.data.actions_caches) {
                console.log(`${dryRun ? '[DRY RUN] Would delete' : 'Deleting'} cache: ${cache.key}`);
                
                if (!dryRun) {
                  try {
                    await github.rest.actions.deleteActionsCacheById({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      cache_id: cache.id
                    });
                    deletedCount++;
                  } catch (error) {
                    console.log(`Failed to delete cache ${cache.key}: ${error.message}`);
                  }
                } else {
                  deletedCount++;
                }
              }
              
              console.log(`\n${dryRun ? 'Would delete' : 'Deleted'} ${deletedCount} cache entries`);
            } catch (error) {
              console.log('Cache cleanup not available or failed:', error.message);
            }

      - name: Generate Report
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          # Cleanup Report
          
          ## Configuration
          - **Dry Run**: ${{ inputs.dry-run }}
          - **Retention Days**: ${{ inputs.retention-days }}
          - **Clean Artifacts**: ${{ inputs.cleanup-artifacts }}
          - **Clean Cache**: ${{ inputs.cleanup-cache }}
          
          ## Results
          Check the workflow logs for detailed cleanup results.
          
          ---
          *Cleanup completed at $(date)*
          EOF