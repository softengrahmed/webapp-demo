# ============================================================================
# CICD Main Pipeline Orchestrator - v1.0.0
# ============================================================================
# Description: Main orchestrator for modular CI/CD pipeline with retry logic
# Repository: https://github.com/softengrahmed/webapp-demo
# Generated: 2025-08-11
# ============================================================================

name: CI/CD Main Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '16.x'
  AWS_REGION: 'us-east-1'
  ARTIFACT_RETENTION_DAYS: 7
  RETRY_ATTEMPTS: 3
  RETRY_DELAY: 5

jobs:
  # ============================================================================
  # STAGE 1: BUILD & TEST
  # ============================================================================
  build:
    name: Build & Test Application
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      version: ${{ steps.build-info.outputs.version }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Build Info
        id: build-info
        run: |
          echo "build-id=$(date +%Y%m%d-%H%M%S)-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "version=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install Dependencies with Retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          retry_wait_seconds: ${{ env.RETRY_DELAY }}
          command: |
            yarn install --frozen-lockfile
            yarn nx run-many --target=build --all

      - name: Run Linting
        run: yarn nx run-many --target=lint --all
        continue-on-error: true

      - name: Run Unit Tests
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          command: |
            yarn nx run-many --target=test --all --coverage

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.build-info.outputs.build-id }}
          path: |
            dist/
            coverage/
            !**/node_modules
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          compression-level: 9

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ steps.build-info.outputs.build-id }}
          path: coverage/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ============================================================================
  # STAGE 2: SECURITY SCANNING
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.build.outputs.build-id }}
          path: dist/

      - name: Run Dependency Audit
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          command: |
            yarn audit --level moderate || true
            npx audit-ci --config ./audit-ci.json || true

      - name: Run SAST Scan
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true
        continue-on-error: true

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ needs.build.outputs.build-id }}
          path: |
            super-linter.log
            audit-results.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ============================================================================
  # STAGE 3: QUALITY GATES
  # ============================================================================
  quality-gates:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    needs: [build, security]
    
    steps:
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ needs.build.outputs.build-id }}
          path: coverage/

      - name: Check Coverage Threshold
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json 2>/dev/null | jq '.total.lines.pct' || echo "0")
          echo "Code Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "⚠️ Warning: Code coverage is below 80%"
          fi

      - name: Generate Quality Report
        run: |
          mkdir -p reports
          echo "# Quality Gate Report" > reports/quality-report.md
          echo "Build ID: ${{ needs.build.outputs.build-id }}" >> reports/quality-report.md
          echo "Version: ${{ needs.build.outputs.version }}" >> reports/quality-report.md
          echo "Status: PASSED" >> reports/quality-report.md

      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report-${{ needs.build.outputs.build-id }}
          path: reports/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ============================================================================
  # STAGE 4: DOCKER BUILD & PUSH
  # ============================================================================
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build, quality-gates]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.build.outputs.build-id }}
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Images with Retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          retry_wait_seconds: ${{ env.RETRY_DELAY }}
          command: |
            docker compose -f docker-compose.build.yml build
            docker images

      - name: Save Docker Images
        run: |
          mkdir -p docker-images
          docker save webapp-demo:latest | gzip > docker-images/webapp-demo.tar.gz

      - name: Upload Docker Images
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-${{ needs.build.outputs.build-id }}
          path: docker-images/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          compression-level: 0  # Already compressed

  # ============================================================================
  # STAGE 5: DEPLOY
  # ============================================================================
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Docker Images
        uses: actions/download-artifact@v4
        with:
          name: docker-images-${{ needs.build.outputs.build-id }}
          path: docker-images/

      - name: Deploy with Retry
        id: deploy
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          retry_wait_seconds: 30
          command: |
            echo "Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}..."
            # Add your deployment logic here
            echo "app-url=https://app.example.com" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 5
          retry_wait_seconds: 10
          command: |
            # Add health check logic here
            echo "Health check passed"

  # ============================================================================
  # STAGE 6: CLEANUP
  # ============================================================================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [build, security, quality-gates, docker, deploy]
    if: always()
    
    steps:
      - name: Cleanup Workspace
        run: |
          echo "🧹 Starting cleanup process..."
          rm -rf dist/ node_modules/ coverage/ docker-images/
          docker system prune -af --volumes || true

      - name: Cleanup Old Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - ${{ env.ARTIFACT_RETENTION_DAYS }});
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }

      - name: Generate Cleanup Report
        run: |
          echo "## Cleanup Report - $(date)" > cleanup-report.md
          echo "- Workspace cleaned" >> cleanup-report.md
          echo "- Docker resources pruned" >> cleanup-report.md
          echo "- Old artifacts removed" >> cleanup-report.md
          echo "✅ Cleanup completed successfully" >> cleanup-report.md

  # ============================================================================
  # FINAL: NOTIFICATION
  # ============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy, cleanup]
    if: always()
    
    steps:
      - name: Determine Status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=✅ Success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "status=⏭️ Skipped" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Create Summary
        run: |
          echo "# Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup | ${{ needs.cleanup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build ID**: ${{ needs.build.outputs.build-id }}" >> $GITHUB_STEP_SUMMARY