name: üßπ AWS Resource Cleanup
# Automated cleanup workflow for maintaining zero-cost operation

on:
  workflow_dispatch:
    inputs:
      pipeline_id:
        description: 'Pipeline ID to clean up'
        required: true
        type: string
      cleanup_scope:
        description: 'Cleanup scope'
        required: false
        default: 'all'
        type: choice
        options:
        - 'all'
        - 'storage_only'
        - 'compute_only'
        - 'network_only'
      confirm_deletion:
        description: 'Confirm resource deletion'
        required: true
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1

jobs:
  cleanup-resources:
    name: üóëÔ∏è Clean Up AWS Resources
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
    
    - name: ‚úÖ Validate Cleanup Request
      run: |
        if [[ "${{ github.event.inputs.confirm_deletion }}" != "true" ]]; then
          echo "‚ùå Cleanup not confirmed. Please confirm deletion to proceed."
          exit 1
        fi
        
        echo "‚úÖ Cleanup confirmed for pipeline: ${{ github.event.inputs.pipeline_id }}"
        echo "üéØ Cleanup scope: ${{ github.event.inputs.cleanup_scope }}"
    
    - name: üîë Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: üóëÔ∏è Delete S3 Resources
      if: contains(github.event.inputs.cleanup_scope, 'all') || contains(github.event.inputs.cleanup_scope, 'storage')
      run: |
        echo "üóëÔ∏è Cleaning up S3 resources..."
        
        # Extract run ID from pipeline ID
        RUN_ID=$(echo "${{ github.event.inputs.pipeline_id }}" | grep -oE '[0-9]+' | head -1)
        
        # Delete frontend bucket
        FRONTEND_BUCKET="webapp-frontend-$RUN_ID"
        if aws s3 ls "s3://$FRONTEND_BUCKET" 2>/dev/null; then
          echo "Deleting frontend bucket: $FRONTEND_BUCKET"
          aws s3 rm "s3://$FRONTEND_BUCKET" --recursive
          aws s3 rb "s3://$FRONTEND_BUCKET"
          echo "‚úÖ Frontend bucket deleted"
        else
          echo "‚ö†Ô∏è  Frontend bucket not found: $FRONTEND_BUCKET"
        fi
        
        # Delete artifacts bucket
        ARTIFACTS_BUCKET="pipeline-artifacts-$RUN_ID"
        if aws s3 ls "s3://$ARTIFACTS_BUCKET" 2>/dev/null; then
          echo "Deleting artifacts bucket: $ARTIFACTS_BUCKET"
          aws s3 rm "s3://$ARTIFACTS_BUCKET" --recursive
          aws s3 rb "s3://$ARTIFACTS_BUCKET"
          echo "‚úÖ Artifacts bucket deleted"
        else
          echo "‚ö†Ô∏è  Artifacts bucket not found: $ARTIFACTS_BUCKET"
        fi
    
    - name: üóëÔ∏è Delete Lambda Functions
      if: contains(github.event.inputs.cleanup_scope, 'all') || contains(github.event.inputs.cleanup_scope, 'compute')
      run: |
        echo "üóëÔ∏è Cleaning up Lambda functions..."
        
        # Extract run ID from pipeline ID
        RUN_ID=$(echo "${{ github.event.inputs.pipeline_id }}" | grep -oE '[0-9]+' | head -1)
        
        # Delete Lambda function
        LAMBDA_FUNCTION="webapp-api-$RUN_ID"
        if aws lambda get-function --function-name "$LAMBDA_FUNCTION" 2>/dev/null; then
          echo "Deleting Lambda function: $LAMBDA_FUNCTION"
          aws lambda delete-function --function-name "$LAMBDA_FUNCTION"
          echo "‚úÖ Lambda function deleted"
        else
          echo "‚ö†Ô∏è  Lambda function not found: $LAMBDA_FUNCTION"
        fi
    
    - name: üóëÔ∏è Delete API Gateway
      if: contains(github.event.inputs.cleanup_scope, 'all') || contains(github.event.inputs.cleanup_scope, 'network')
      run: |
        echo "üóëÔ∏è Cleaning up API Gateway..."
        
        # Extract run ID from pipeline ID
        RUN_ID=$(echo "${{ github.event.inputs.pipeline_id }}" | grep -oE '[0-9]+' | head -1)
        
        # Delete API Gateway
        API_NAME="webapp-gateway-$RUN_ID"
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$API_NAME'].id" --output text)
        
        if [[ -n "$API_ID" && "$API_ID" != "None" ]]; then
          echo "Deleting API Gateway: $API_NAME (ID: $API_ID)"
          aws apigateway delete-rest-api --rest-api-id "$API_ID"
          echo "‚úÖ API Gateway deleted"
        else
          echo "‚ö†Ô∏è  API Gateway not found: $API_NAME"
        fi
    
    - name: üóëÔ∏è Delete DynamoDB Table
      if: contains(github.event.inputs.cleanup_scope, 'all') || contains(github.event.inputs.cleanup_scope, 'storage')
      run: |
        echo "üóëÔ∏è Cleaning up DynamoDB table..."
        
        # Extract run ID from pipeline ID
        RUN_ID=$(echo "${{ github.event.inputs.pipeline_id }}" | grep -oE '[0-9]+' | head -1)
        
        # Delete DynamoDB table
        TABLE_NAME="webapp-data-$RUN_ID"
        if aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
          echo "Deleting DynamoDB table: $TABLE_NAME"
          aws dynamodb delete-table --table-name "$TABLE_NAME"
          echo "‚úÖ DynamoDB table deletion initiated"
        else
          echo "‚ö†Ô∏è  DynamoDB table not found: $TABLE_NAME"
        fi
    
    - name: üóëÔ∏è Delete IAM Roles
      if: contains(github.event.inputs.cleanup_scope, 'all')
      run: |
        echo "üóëÔ∏è Cleaning up IAM roles..."
        
        # Extract run ID from pipeline ID
        RUN_ID=$(echo "${{ github.event.inputs.pipeline_id }}" | grep -oE '[0-9]+' | head -1)
        
        # Delete Lambda execution role
        ROLE_NAME="lambda-execution-role-$RUN_ID"
        if aws iam get-role --role-name "$ROLE_NAME" 2>/dev/null; then
          echo "Detaching policies from role: $ROLE_NAME"
          
          # Detach managed policies
          aws iam detach-role-policy --role-name "$ROLE_NAME" --policy-arn "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" 2>/dev/null || true
          aws iam detach-role-policy --role-name "$ROLE_NAME" --policy-arn "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess" 2>/dev/null || true
          
          # Delete role
          aws iam delete-role --role-name "$ROLE_NAME"
          echo "‚úÖ IAM role deleted: $ROLE_NAME"
        else
          echo "‚ö†Ô∏è  IAM role not found: $ROLE_NAME"
        fi
    
    - name: üìä Cleanup Summary
      run: |
        echo "=== üßπ CLEANUP SUMMARY ==="
        echo ""
        echo "‚úÖ **CLEANUP COMPLETED**"
        echo "Pipeline ID: ${{ github.event.inputs.pipeline_id }}"
        echo "Cleanup Scope: ${{ github.event.inputs.cleanup_scope }}"
        echo "Execution Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        echo "üóëÔ∏è **RESOURCES CLEANED UP**:"
        
        RUN_ID=$(echo "${{ github.event.inputs.pipeline_id }}" | grep -oE '[0-9]+' | head -1)
        
        if [[ "${{ github.event.inputs.cleanup_scope }}" == *"all"* ]] || [[ "${{ github.event.inputs.cleanup_scope }}" == *"storage"* ]]; then
          echo "- S3 Frontend Bucket: webapp-frontend-$RUN_ID"
          echo "- S3 Artifacts Bucket: pipeline-artifacts-$RUN_ID"
          echo "- DynamoDB Table: webapp-data-$RUN_ID"
        fi
        
        if [[ "${{ github.event.inputs.cleanup_scope }}" == *"all"* ]] || [[ "${{ github.event.inputs.cleanup_scope }}" == *"compute"* ]]; then
          echo "- Lambda Function: webapp-api-$RUN_ID"
        fi
        
        if [[ "${{ github.event.inputs.cleanup_scope }}" == *"all"* ]] || [[ "${{ github.event.inputs.cleanup_scope }}" == *"network"* ]]; then
          echo "- API Gateway: webapp-gateway-$RUN_ID"
        fi
        
        if [[ "${{ github.event.inputs.cleanup_scope }}" == *"all"* ]]; then
          echo "- IAM Role: lambda-execution-role-$RUN_ID"
        fi
        
        echo ""
        echo "üí∞ **COST IMPACT**:"
        echo "- Ongoing costs after cleanup: \$0.00"
        echo "- Free tier usage reset for next deployment"
        echo ""
        echo "‚ú® **ZERO-COST OPERATION MAINTAINED** ‚ú®"
