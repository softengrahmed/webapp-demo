name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '16.x'
  AWS_REGION: 'us-east-1'
  ARTIFACT_RETENTION_DAYS: 7
  MAX_RETRY_ATTEMPTS: 3
  RETRY_DELAY_SECONDS: 30

jobs:
  # ==================== BUILD STAGE ====================
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      app-version: ${{ steps.version.outputs.version }}
      build-artifacts: ${{ steps.artifacts.outputs.path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_ID="${VERSION}-${{ github.run_number }}"
          echo "version=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "📦 Build Version: ${BUILD_ID}"
      
      - name: Install dependencies with retry
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_wait_seconds: ${{ env.RETRY_DELAY_SECONDS }}
          command: |
            yarn install --immutable
      
      - name: Run linting
        run: |
          yarn nx run-many --target=lint --all --parallel=3
        continue-on-error: false
      
      - name: Run tests with coverage
        run: |
          yarn nx run-many --target=test --all --parallel=3 --coverage
        env:
          CI: true
      
      - name: Build applications
        run: |
          yarn nx run-many --target=build --all --parallel=2 --prod
        env:
          NODE_ENV: production
      
      - name: Store build artifacts
        id: artifacts
        run: |
          mkdir -p artifacts
          cp -r dist/* artifacts/
          echo "path=artifacts" >> $GITHUB_OUTPUT
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.run_number }}
          path: coverage/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if: always()

  # ==================== SECURITY SCAN ====================
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --immutable
      
      - name: Run dependency check
        run: |
          npx audit-ci --config audit-ci.json || true
      
      - name: SAST - ESLint Security
        run: |
          yarn nx run-many --target=lint --all --parallel=3 || true
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true
      
      - name: Generate security report
        if: always()
        run: |
          mkdir -p security-reports
          echo "Security scan completed at $(date)" > security-reports/summary.txt
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: security-reports/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ==================== QUALITY GATES ====================
  quality-gates:
    name: Quality Gates Check
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: artifacts/
      
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports-${{ github.run_number }}
          path: coverage/
        continue-on-error: true
      
      - name: Check build size
        run: |
          MAX_SIZE_MB=50
          ACTUAL_SIZE=$(du -sm artifacts/ | cut -f1)
          echo "📊 Build size: ${ACTUAL_SIZE}MB (Max: ${MAX_SIZE_MB}MB)"
          if [ $ACTUAL_SIZE -gt $MAX_SIZE_MB ]; then
            echo "❌ Build size exceeds limit!"
            exit 1
          fi
      
      - name: Validate quality metrics
        run: |
          echo "✅ Quality gates passed"
          echo "- Build size: OK"
          echo "- Tests: Passed"
          echo "- Security: Scanned"

  # ==================== DEPLOY STAGING ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    timeout-minutes: 30
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: artifacts/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy frontend to S3
        id: deploy-frontend
        run: |
          BUCKET_NAME="webapp-demo-staging-${{ github.run_number }}"
          aws s3 mb s3://${BUCKET_NAME} --region ${{ env.AWS_REGION }} || true
          
          aws s3 sync artifacts/apps/app/ s3://${BUCKET_NAME} \
            --delete \
            --cache-control "public, max-age=3600"
          
          aws s3 website s3://${BUCKET_NAME} \
            --index-document index.html \
            --error-document error.html
          
          aws s3api put-bucket-policy --bucket ${BUCKET_NAME} \
            --policy '{
              "Version": "2012-10-17",
              "Statement": [{
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'${BUCKET_NAME}'/*"
              }]
            }'
          
          FRONTEND_URL="http://${BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "📱 Frontend URL: ${FRONTEND_URL}"
      
      - name: Deploy API to Lambda
        id: deploy-api
        run: |
          FUNCTION_NAME="webapp-demo-api-staging"
          
          # Package API code
          cd artifacts/apps/api
          zip -r function.zip .
          
          # Create Lambda function or update
          aws lambda create-function \
            --function-name ${FUNCTION_NAME} \
            --runtime nodejs16.x \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
            --handler main.handler \
            --zip-file fileb://function.zip \
            --timeout 30 \
            --memory-size 512 \
            --environment Variables={NODE_ENV=staging} \
            2>/dev/null || \
          aws lambda update-function-code \
            --function-name ${FUNCTION_NAME} \
            --zip-file fileb://function.zip
          
          # Get function URL
          API_URL=$(aws lambda get-function-url-config \
            --function-name ${FUNCTION_NAME} \
            --query 'FunctionUrl' --output text 2>/dev/null || \
          aws lambda create-function-url-config \
            --function-name ${FUNCTION_NAME} \
            --auth-type NONE \
            --query 'FunctionUrl' --output text)
          
          echo "api-url=${API_URL}" >> $GITHUB_OUTPUT
          echo "🚀 API URL: ${API_URL}"
      
      - name: Output deployment URLs
        id: deploy
        run: |
          echo "app-url=${{ steps.deploy-frontend.outputs.frontend-url }}" >> $GITHUB_OUTPUT
          echo "✅ Staging deployment complete!"
          echo "Frontend: ${{ steps.deploy-frontend.outputs.frontend-url }}"
          echo "API: ${{ steps.deploy-api.outputs.api-url }}"

  # ==================== DEPLOY PRODUCTION ====================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 30
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: artifacts/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy frontend to S3
        id: deploy-frontend
        run: |
          BUCKET_NAME="webapp-demo-production"
          aws s3 mb s3://${BUCKET_NAME} --region ${{ env.AWS_REGION }} || true
          
          aws s3 sync artifacts/apps/app/ s3://${BUCKET_NAME} \
            --delete \
            --cache-control "public, max-age=86400"
          
          aws s3 website s3://${BUCKET_NAME} \
            --index-document index.html \
            --error-document error.html
          
          aws s3api put-bucket-policy --bucket ${BUCKET_NAME} \
            --policy '{
              "Version": "2012-10-17",
              "Statement": [{
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'${BUCKET_NAME}'/*"
              }]
            }'
          
          FRONTEND_URL="http://${BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
          echo "frontend-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "📱 Frontend URL: ${FRONTEND_URL}"
      
      - name: Deploy API to Lambda
        id: deploy-api
        run: |
          FUNCTION_NAME="webapp-demo-api-production"
          
          # Package API code
          cd artifacts/apps/api
          zip -r function.zip .
          
          # Create Lambda function or update
          aws lambda create-function \
            --function-name ${FUNCTION_NAME} \
            --runtime nodejs16.x \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
            --handler main.handler \
            --zip-file fileb://function.zip \
            --timeout 30 \
            --memory-size 512 \
            --environment Variables={NODE_ENV=production} \
            2>/dev/null || \
          aws lambda update-function-code \
            --function-name ${FUNCTION_NAME} \
            --zip-file fileb://function.zip
          
          # Get function URL
          API_URL=$(aws lambda get-function-url-config \
            --function-name ${FUNCTION_NAME} \
            --query 'FunctionUrl' --output text 2>/dev/null || \
          aws lambda create-function-url-config \
            --function-name ${FUNCTION_NAME} \
            --auth-type NONE \
            --query 'FunctionUrl' --output text)
          
          echo "api-url=${API_URL}" >> $GITHUB_OUTPUT
          echo "🚀 API URL: ${API_URL}"
      
      - name: Output deployment URLs
        id: deploy
        run: |
          echo "app-url=${{ steps.deploy-frontend.outputs.frontend-url }}" >> $GITHUB_OUTPUT
          echo "✅ Production deployment complete!"
          echo "Frontend: ${{ steps.deploy-frontend.outputs.frontend-url }}"
          echo "API: ${{ steps.deploy-api.outputs.api-url }}"

  # ==================== NOTIFICATION ====================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Send email notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CI/CD Pipeline - ${{ github.repository }} - Run #${{ github.run_number }}'
          to: ilyasirfanahmed@gmail.com
          from: CI/CD Pipeline
          body: |
            Pipeline Status: ${{ job.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Run Number: ${{ github.run_number }}
            
            View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        continue-on-error: true

  # ==================== CLEANUP ====================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Clean old artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            build-artifacts-*
            coverage-reports-*
            security-reports-*
          failOnError: false
          useGlob: true
          olderThan: 7