name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18.x'
  AWS_REGION: 'us-east-1'
  ARTIFACT_RETENTION_DAYS: 7
  MAX_RETRY_ATTEMPTS: 3
  RETRY_DELAY_SECONDS: 30

jobs:
  # ==================== BUILD STAGE ====================
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      app-version: ${{ steps.version.outputs.version }}
      build-artifacts: ${{ steps.artifacts.outputs.path }}
      report-url: ${{ steps.report.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Initialize Build Logs
        run: |
          mkdir -p deployment-reports/run-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)
          echo "# Build Stage Logs" > deployment-reports/run-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)/build-logs.md
          echo "**Started:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-reports/run-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)/build-logs.md
          echo "**Node Version:** ${{ env.NODE_VERSION }}" >> deployment-reports/run-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)/build-logs.md
          echo "" >> deployment-reports/run-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)/build-logs.md
          echo "REPORT_DIR=deployment-reports/run-${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
      
      - name: Setup Package Manager with Retry
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_wait_seconds: ${{ env.RETRY_DELAY_SECONDS }}
          retry_on: error
          command: |
            echo "## Package Manager Setup" >> ${{ env.REPORT_DIR }}/build-logs.md
            echo "Attempt to setup Yarn..." | tee -a ${{ env.REPORT_DIR }}/build-logs.md
            
            # Check if using Yarn Berry
            if [ -f ".yarnrc.yml" ]; then
              echo "Found .yarnrc.yml - Setting up Yarn Berry" | tee -a ${{ env.REPORT_DIR }}/build-logs.md
              # Remove conflicting yarn-path
              sed -i '/yarnPath:/d' .yarnrc.yml || true
              # Enable corepack
              corepack enable
              corepack prepare yarn@stable --activate
              yarn --version | tee -a ${{ env.REPORT_DIR }}/build-logs.md
            else
              echo "Using npm (no .yarnrc.yml found)" | tee -a ${{ env.REPORT_DIR }}/build-logs.md
              npm --version | tee -a ${{ env.REPORT_DIR }}/build-logs.md
            fi
      
      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          BUILD_ID="${VERSION}-${{ github.run_number }}"
          echo "version=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "📦 Build Version: ${BUILD_ID}" | tee -a ${{ env.REPORT_DIR }}/build-logs.md
      
      - name: Install dependencies with retry
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: ${{ env.MAX_RETRY_ATTEMPTS }}
          retry_wait_seconds: ${{ env.RETRY_DELAY_SECONDS }}
          retry_on: error
          command: |
            echo "## Dependency Installation" >> ${{ env.REPORT_DIR }}/build-logs.md
            echo "Attempt #$((GITHUB_RUN_ATTEMPT))" | tee -a ${{ env.REPORT_DIR }}/build-logs.md
            
            if [ -f "yarn.lock" ]; then
              echo "Installing with Yarn..." | tee -a ${{ env.REPORT_DIR }}/build-logs.md
              yarn install 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || 
              yarn install --no-immutable 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md
            else
              echo "Installing with npm..." | tee -a ${{ env.REPORT_DIR }}/build-logs.md
              npm ci 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || 
              npm install 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md
            fi
      
      - name: Run linting
        run: |
          echo "## Linting" >> ${{ env.REPORT_DIR }}/build-logs.md
          if [ -f "yarn.lock" ]; then
            yarn nx run-many --target=lint --all --parallel=3 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || true
          else
            npm run lint 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || true
          fi
        continue-on-error: true
      
      - name: Run tests with coverage
        run: |
          echo "## Testing" >> ${{ env.REPORT_DIR }}/build-logs.md
          if [ -f "yarn.lock" ]; then
            yarn nx run-many --target=test --all --parallel=3 --coverage 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || true
          else
            npm test 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || true
          fi
        env:
          CI: true
        continue-on-error: true
      
      - name: Build applications
        run: |
          echo "## Build Process" >> ${{ env.REPORT_DIR }}/build-logs.md
          if [ -f "yarn.lock" ]; then
            yarn nx run-many --target=build --all --parallel=2 --prod 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || 
            yarn build 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || true
          else
            npm run build 2>&1 | tee -a ${{ env.REPORT_DIR }}/build-logs.md || true
          fi
        env:
          NODE_ENV: production
        continue-on-error: true
      
      - name: Store build artifacts
        id: artifacts
        run: |
          mkdir -p artifacts
          if [ -d "dist" ]; then
            cp -r dist/* artifacts/ 2>/dev/null || true
          fi
          echo "path=artifacts" >> $GITHUB_OUTPUT
          echo "Build artifacts stored" | tee -a ${{ env.REPORT_DIR }}/build-logs.md
      
      - name: Generate Pipeline Report
        id: report
        run: |
          cat > ${{ env.REPORT_DIR }}/pipeline-report.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>CI/CD Pipeline Report - Run #${{ github.run_number }}</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                  .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; }
                  .content { padding: 30px; }
                  .section { margin-bottom: 30px; }
                  .section h2 { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px; }
                  .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
                  .metric-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea; }
                  .metric-card h3 { margin: 0 0 10px 0; color: #555; font-size: 14px; text-transform: uppercase; }
                  .metric-card .value { font-size: 24px; font-weight: bold; color: #333; }
                  .status { display: inline-block; padding: 5px 10px; border-radius: 4px; font-weight: bold; }
                  .status.success { background: #d4edda; color: #155724; }
                  .status.warning { background: #fff3cd; color: #856404; }
                  .status.error { background: #f8d7da; color: #721c24; }
                  .table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                  .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
                  .table th { background: #f8f9fa; font-weight: 600; }
                  .code-block { background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; font-family: monospace; }
                  .cost-table { background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0; }
                  .alert { padding: 15px; border-radius: 5px; margin: 15px 0; }
                  .alert.info { background: #d1ecf1; color: #0c5460; border-left: 4px solid #0c5460; }
                  .alert.warning { background: #fff3cd; color: #856404; border-left: 4px solid #856404; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🚀 CI/CD Pipeline Report</h1>
                      <p>Run #${{ github.run_number }} - ${{ github.ref_name }} Branch</p>
                      <p>Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)</p>
                  </div>
                  
                  <div class="content">
                      <!-- Pipeline Configuration -->
                      <div class="section">
                          <h2>📋 Pipeline Configuration</h2>
                          <div class="metrics">
                              <div class="metric-card">
                                  <h3>Budget Tier</h3>
                                  <div class="value">Free Tier</div>
                                  <small>$0-5/month</small>
                              </div>
                              <div class="metric-card">
                                  <h3>Platform</h3>
                                  <div class="value">AWS Serverless</div>
                                  <small>Lambda + S3 + API Gateway</small>
                              </div>
                              <div class="metric-card">
                                  <h3>Build Version</h3>
                                  <div class="value">${{ steps.version.outputs.version }}</div>
                                  <small>Commit: ${{ github.sha }}</small>
                              </div>
                              <div class="metric-card">
                                  <h3>Node Version</h3>
                                  <div class="value">${{ env.NODE_VERSION }}</div>
                                  <small>Runtime Environment</small>
                              </div>
                          </div>
                      </div>

                      <!-- Features Enabled -->
                      <div class="section">
                          <h2>✨ Features Enabled</h2>
                          <table class="table">
                              <tr>
                                  <th>Feature</th>
                                  <th>Status</th>
                                  <th>Description</th>
                              </tr>
                              <tr>
                                  <td>🔒 Security Scanning</td>
                                  <td><span class="status success">ENABLED</span></td>
                                  <td>SAST, DAST, and dependency vulnerability checks</td>
                              </tr>
                              <tr>
                                  <td>📊 Quality Gates</td>
                                  <td><span class="status success">ENABLED</span></td>
                                  <td>Build size limits, test coverage requirements</td>
                              </tr>
                              <tr>
                                  <td>🌍 Multi-Environment</td>
                                  <td><span class="status success">ENABLED</span></td>
                                  <td>Staging and Production deployments</td>
                              </tr>
                              <tr>
                                  <td>📧 Email Notifications</td>
                                  <td><span class="status warning">PENDING</span></td>
                                  <td>Requires EMAIL_USERNAME and EMAIL_PASSWORD secrets</td>
                              </tr>
                              <tr>
                                  <td>🔄 Progressive Retry</td>
                                  <td><span class="status success">ENABLED</span></td>
                                  <td>3 attempts with 30-second backoff</td>
                              </tr>
                              <tr>
                                  <td>📈 CloudWatch Monitoring</td>
                                  <td><span class="status warning">PENDING</span></td>
                                  <td>Requires AWS credentials configuration</td>
                              </tr>
                          </table>
                      </div>

                      <!-- Cost Analysis -->
                      <div class="section">
                          <h2>💰 Cost Expectations</h2>
                          <div class="cost-table">
                              <h3>Monthly Cost Breakdown (AWS Free Tier)</h3>
                              <table class="table">
                                  <tr>
                                      <th>Service</th>
                                      <th>Free Tier Limit</th>
                                      <th>Expected Usage</th>
                                      <th>Est. Cost</th>
                                  </tr>
                                  <tr>
                                      <td>AWS Lambda</td>
                                      <td>1M requests, 400K GB-seconds</td>
                                      <td>~100K requests</td>
                                      <td>$0.00</td>
                                  </tr>
                                  <tr>
                                      <td>Amazon S3</td>
                                      <td>5GB storage, 20K GET requests</td>
                                      <td><1GB storage</td>
                                      <td>$0.00</td>
                                  </tr>
                                  <tr>
                                      <td>CloudWatch</td>
                                      <td>5GB logs, 10 metrics, 10 alarms</td>
                                      <td><1GB logs</td>
                                      <td>$0.00</td>
                                  </tr>
                                  <tr>
                                      <td>API Gateway</td>
                                      <td>1M API calls</td>
                                      <td>~50K calls</td>
                                      <td>$0.00</td>
                                  </tr>
                                  <tr style="font-weight: bold; background: #e8f5e9;">
                                      <td colspan="3">Total Monthly Estimate</td>
                                      <td>$0.00 - $5.00</td>
                                  </tr>
                              </table>
                          </div>
                      </div>

                      <!-- Required Setup Steps -->
                      <div class="section">
                          <h2>⚙️ Required Setup Steps</h2>
                          <div class="alert info">
                              <strong>GitHub Secrets Required:</strong>
                              <ul>
                                  <li>AWS_ACCESS_KEY_ID - AWS IAM user access key</li>
                                  <li>AWS_SECRET_ACCESS_KEY - AWS IAM user secret key</li>
                                  <li>AWS_ACCOUNT_ID - Your AWS account ID</li>
                                  <li>EMAIL_USERNAME - Gmail address for notifications</li>
                                  <li>EMAIL_PASSWORD - Gmail app password (not regular password)</li>
                              </ul>
                          </div>
                          
                          <h3>AWS Setup Commands:</h3>
                          <div class="code-block">
# Create IAM role for Lambda\naws iam create-role \\\n  --role-name lambda-execution-role \\\n  --assume-role-policy-document '{\n    "Version": "2012-10-17",\n    "Statement": [{\n      "Effect": "Allow",\n      "Principal": {"Service": "lambda.amazonaws.com"},\n      "Action": "sts:AssumeRole"\n    }]\n  }'\n\n# Attach execution policy\naws iam attach-role-policy \\\n  --role-name lambda-execution-role \\\n  --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                          </div>
                      </div>

                      <!-- Manual Cleanup Tasks -->
                      <div class="section">
                          <h2>🧹 Manual Cleanup Tasks</h2>
                          <div class="alert warning">
                              <strong>Weekly Cleanup (Automated):</strong>
                              <p>The cleanup workflow runs automatically every Monday at 2 AM UTC</p>
                          </div>
                          
                          <h3>Manual Cleanup Commands:</h3>
                          <div class="code-block">
# List staging S3 buckets older than 7 days\naws s3api list-buckets --query "Buckets[?contains(Name, 'webapp-demo-staging')].Name" --output text\n\n# Delete old staging bucket\naws s3 rm s3://webapp-demo-staging-XXX --recursive\naws s3api delete-bucket --bucket webapp-demo-staging-XXX\n\n# Delete old Lambda versions\naws lambda list-versions-by-function --function-name webapp-demo-api-staging --query "Versions[?Version!='\$LATEST'].Version" --output text\n\n# Clean CloudWatch logs\naws logs put-retention-policy --log-group-name /aws/lambda/webapp-demo-api-staging --retention-in-days 7
                          </div>
                      </div>

                      <!-- Deployment URLs -->
                      <div class="section">
                          <h2>🌐 Deployment URLs</h2>
                          <table class="table">
                              <tr>
                                  <th>Environment</th>
                                  <th>Component</th>
                                  <th>URL Pattern</th>
                              </tr>
                              <tr>
                                  <td>Staging</td>
                                  <td>Frontend</td>
                                  <td><code>http://webapp-demo-staging-{buildId}.s3-website-us-east-1.amazonaws.com</code></td>
                              </tr>
                              <tr>
                                  <td>Staging</td>
                                  <td>API</td>
                                  <td><code>https://{functionId}.lambda-url.us-east-1.on.aws/</code></td>
                              </tr>
                              <tr>
                                  <td>Production</td>
                                  <td>Frontend</td>
                                  <td><code>http://webapp-demo-production.s3-website-us-east-1.amazonaws.com</code></td>
                              </tr>
                              <tr>
                                  <td>Production</td>
                                  <td>API</td>
                                  <td><code>https://{functionId}.lambda-url.us-east-1.on.aws/</code></td>
                              </tr>
                          </table>
                      </div>

                      <!-- Build Status -->
                      <div class="section">
                          <h2>📊 Build Status</h2>
                          <div class="metrics">
                              <div class="metric-card">
                                  <h3>Repository</h3>
                                  <div class="value">${{ github.repository }}</div>
                              </div>
                              <div class="metric-card">
                                  <h3>Workflow Run</h3>
                                  <div class="value">#${{ github.run_number }}</div>
                              </div>
                              <div class="metric-card">
                                  <h3>Triggered By</h3>
                                  <div class="value">${{ github.actor }}</div>
                              </div>
                              <div class="metric-card">
                                  <h3>Event Type</h3>
                                  <div class="value">${{ github.event_name }}</div>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          echo "url=${{ env.REPORT_DIR }}/pipeline-report.html" >> $GITHUB_OUTPUT
          echo "Pipeline report generated" | tee -a ${{ env.REPORT_DIR }}/build-logs.md
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: deployment-reports-${{ github.run_number }}
          path: ${{ env.REPORT_DIR }}
          retention-days: 30
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.run_number }}
          path: coverage/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
        if: always()
        continue-on-error: true

  # ==================== DEPLOY STAGING ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    timeout-minutes: 30
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_number }}
          path: artifacts/
      
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: deployment-reports-${{ github.run_number }}
          path: deployment-reports/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        continue-on-error: true
      
      - name: Deploy and Collect AWS Logs
        id: deploy
        run: |
          REPORT_DIR=$(ls -d deployment-reports/run-* | head -1)
          echo "# Staging Deployment Logs" > ${REPORT_DIR}/staging-deployment.md
          echo "**Started:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> ${REPORT_DIR}/staging-deployment.md
          echo "" >> ${REPORT_DIR}/staging-deployment.md
          
          # Deploy Frontend to S3
          echo "## S3 Frontend Deployment" >> ${REPORT_DIR}/staging-deployment.md
          if [ -d "artifacts/apps/app" ]; then
            BUCKET_NAME="webapp-demo-staging-${{ github.run_number }}"
            echo "Creating bucket: ${BUCKET_NAME}" | tee -a ${REPORT_DIR}/staging-deployment.md
            
            aws s3 mb s3://${BUCKET_NAME} --region ${{ env.AWS_REGION }} 2>&1 | tee -a ${REPORT_DIR}/staging-deployment.md || true
            
            echo "Syncing files..." | tee -a ${REPORT_DIR}/staging-deployment.md
            aws s3 sync artifacts/apps/app/ s3://${BUCKET_NAME} \
              --delete \
              --cache-control "public, max-age=3600" 2>&1 | tee -a ${REPORT_DIR}/staging-deployment.md
            
            aws s3 website s3://${BUCKET_NAME} \
              --index-document index.html \
              --error-document error.html 2>&1 | tee -a ${REPORT_DIR}/staging-deployment.md
            
            FRONTEND_URL="http://${BUCKET_NAME}.s3-website-${AWS_REGION}.amazonaws.com"
            echo "Frontend deployed to: ${FRONTEND_URL}" | tee -a ${REPORT_DIR}/staging-deployment.md
            echo "app-url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          else
            echo "No frontend artifacts found" | tee -a ${REPORT_DIR}/staging-deployment.md
          fi
          
          # Deploy API to Lambda
          echo "## Lambda API Deployment" >> ${REPORT_DIR}/staging-deployment.md
          if [ -d "artifacts/apps/api" ]; then
            cd artifacts/apps/api
            zip -r function.zip . > /dev/null 2>&1
            
            FUNCTION_NAME="webapp-demo-api-staging"
            echo "Deploying Lambda function: ${FUNCTION_NAME}" | tee -a ../../../${REPORT_DIR}/staging-deployment.md
            
            # Deploy or update function
            aws lambda create-function \
              --function-name ${FUNCTION_NAME} \
              --runtime nodejs18.x \
              --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
              --handler main.handler \
              --zip-file fileb://function.zip \
              --timeout 30 \
              --memory-size 512 \
              --environment Variables={NODE_ENV=staging} 2>&1 | tee -a ../../../${REPORT_DIR}/staging-deployment.md || \
            aws lambda update-function-code \
              --function-name ${FUNCTION_NAME} \
              --zip-file fileb://function.zip 2>&1 | tee -a ../../../${REPORT_DIR}/staging-deployment.md
            
            # Get CloudWatch logs
            echo "## CloudWatch Logs" >> ../../../${REPORT_DIR}/staging-deployment.md
            aws logs describe-log-streams \
              --log-group-name /aws/lambda/${FUNCTION_NAME} \
              --order-by LastEventTime \
              --descending \
              --limit 5 2>&1 | tee -a ../../../${REPORT_DIR}/staging-deployment.md || echo "No logs available yet"
            
            cd -
          else
            echo "No API artifacts found" | tee -a ${REPORT_DIR}/staging-deployment.md
          fi
          
          echo "**Completed:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> ${REPORT_DIR}/staging-deployment.md
      
      - name: Upload deployment logs
        uses: actions/upload-artifact@v4
        with:
          name: staging-logs-${{ github.run_number }}
          path: deployment-reports/
          retention-days: 30

  # ==================== SUMMARY ====================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          path: reports/
        continue-on-error: true
      
      - name: Generate Summary
        run: |
          echo "# 📊 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Tier:** Free Tier ($0-5/month)" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** AWS Serverless" >> $GITHUB_STEP_SUMMARY
          echo "- **Features:** Security Scanning, Quality Gates, Multi-Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Reports Generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pipeline HTML Report" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build Logs (Markdown)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deployment Logs (Markdown)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Cost Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Add required GitHub Secrets" >> $GITHUB_STEP_SUMMARY
          echo "2. Create AWS IAM role for Lambda" >> $GITHUB_STEP_SUMMARY
          echo "3. Review generated reports in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor costs in AWS Console" >> $GITHUB_STEP_SUMMARY