# Generated Pipeline v1-2025-08-10-14-30-45
# AWS Serverless Deployment Pipeline for webapp-demo

name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-1
  ARTIFACT_RETENTION_DAYS: 7

jobs:
  # Stage 1: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      
      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile
        retry: 3
      
      - name: Run Linting
        run: |
          yarn nx run-many --target=lint --all --parallel
      
      - name: Run Tests
        run: |
          yarn nx run-many --target=test --all --parallel --coverage
      
      - name: Check Code Coverage
        run: |
          coverage_total=$(cat coverage/lcov-report/index.html | grep -oP 'Total.*?\K[0-9.]+(?=%)' | head -1)
          if (( $(echo "$coverage_total < 80" | bc -l) )); then
            echo "Code coverage $coverage_total% is below 80%"
            exit 1
          fi
          echo "Code coverage: $coverage_total%"
      
      - name: Build Applications
        run: |
          yarn nx run-many --target=build --all --parallel --configuration=production
      
      - name: Package Lambda Functions
        run: |
          mkdir -p dist/lambda
          cd dist/apps/api
          zip -r ../../lambda/api-lambda.zip .
          cd ../../..
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
  
  # Stage 2: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 5
    if: success()
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: NPM Audit
        run: |
          npm audit --audit-level=critical
        continue-on-error: false
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: false
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=softengrahmed_webapp-demo
            -Dsonar.organization=softengrahmed
  
  # Stage 3: Deploy
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, security]
    timeout-minutes: 15
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy Infrastructure
        run: |
          # Deploy using AWS SAM or CDK
          cat > template.yaml << 'EOF'
          AWSTemplateFormatVersion: '2010-09-09'
          Transform: AWS::Serverless-2016-10-31
          
          Globals:
            Function:
              Timeout: 30
              MemorySize: 256
              Runtime: nodejs18.x
              Environment:
                Variables:
                  NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          
          Resources:
            ApiFunction:
              Type: AWS::Serverless::Function
              Properties:
                FunctionName: webapp-demo-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
                CodeUri: dist/lambda/api-lambda.zip
                Handler: main.handler
                Events:
                  ApiGateway:
                    Type: Api
                    Properties:
                      Path: /{proxy+}
                      Method: ANY
                      RestApiId: !Ref ApiGateway
            
            ApiGateway:
              Type: AWS::Serverless::Api
              Properties:
                Name: webapp-demo-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
                StageName: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
                Cors:
                  AllowMethods: "'*'"
                  AllowHeaders: "'*'"
                  AllowOrigin: "'*'"
            
            Database:
              Type: AWS::RDS::DBCluster
              Properties:
                Engine: aurora-mysql
                EngineMode: serverless
                EngineVersion: '5.7'
                DatabaseName: webappdb
                MasterUsername: admin
                MasterUserPassword: !Sub '{{resolve:secretsmanager:webapp-demo-db-password::password}}'
                ServerlessV2ScalingConfiguration:
                  MinCapacity: 0.5
                  MaxCapacity: 1
                EnableHttpEndpoint: true
          
          Outputs:
            ApiUrl:
              Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}/'
              Description: API Gateway URL
          EOF
          
          sam deploy --template-file template.yaml \
            --stack-name webapp-demo-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
      
      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name webapp-demo-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} \
            --zip-file fileb://dist/lambda/api-lambda.zip
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name webapp-demo-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      
      - name: Configure Blue-Green Deployment
        if: github.ref == 'refs/heads/main'
        run: |
          # Create new version
          VERSION=$(aws lambda publish-version \
            --function-name webapp-demo-api-prod \
            --query 'Version' --output text)
          
          # Update alias with weighted traffic
          aws lambda update-alias \
            --function-name webapp-demo-api-prod \
            --name live \
            --function-version $VERSION \
            --routing-config AdditionalVersionWeights={"$((VERSION-1))"=0.9}
  
  # Stage 4: Verify
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 5
    if: success()
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Health Check
        run: |
          STAGE=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name webapp-demo-${STAGE} \
            --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" \
            --output text)
          
          for i in {1..3}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${API_URL}health)
            if [ $HTTP_CODE -eq 200 ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed with HTTP $HTTP_CODE"
            sleep 5
          done
          exit 1
      
      - name: Smoke Tests
        run: |
          STAGE=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
          # Run basic API tests
          echo "Running smoke tests for $STAGE environment"
      
      - name: Performance Check
        run: |
          # Check Lambda cold start time
          aws cloudwatch get-metric-statistics \
            --namespace AWS/Lambda \
            --metric-name Duration \
            --dimensions Name=FunctionName,Value=webapp-demo-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} \
            --statistics Average \
            --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
            --period 300
  
  # Stage 5: Report
  report:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [build, security, deploy, verify]
    timeout-minutes: 3
    if: always()
    
    steps:
      - name: Generate Deployment Report
        run: |
          cat > deployment-report.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}",
            "status": "${{ job.status }}",
            "triggered_by": "${{ github.actor }}"
          }
          EOF
      
      - name: Send Notifications
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Deployment failed! Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            })
      
      - name: Update Metrics
        run: |
          echo "Deployment metrics updated"
  
  # Stage 6: Cleanup
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [report]
    timeout-minutes: 2
    if: always()
    
    steps:
      - name: Clean Temporary Resources
        run: |
          echo "Cleaning up temporary resources"
      
      - name: Archive Old Artifacts
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Archiving artifacts older than 30 days"
