name: üìä Setup Monitoring

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      budget_limit:
        description: 'Monthly budget limit (USD)'
        required: true
        default: '5'
        type: string
      enable_detailed_monitoring:
        description: 'Enable detailed monitoring (additional cost)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: 'us-east-1'

jobs:
  setup-monitoring:
    name: üìä Monitoring Setup
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    timeout-minutes: 20
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: ‚öôÔ∏è Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: üí∞ Create budget alerts
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        BUDGET_NAME="webapp-demo-$ENVIRONMENT-budget"
        BUDGET_LIMIT="${{ github.event.inputs.budget_limit }}"
        
        echo "üí∞ Setting up budget alerts: $BUDGET_NAME"
        
        # Create budget policy
        cat > budget-policy.json << EOF
        {
          "BudgetName": "$BUDGET_NAME",
          "BudgetLimit": {
            "Amount": "$BUDGET_LIMIT",
            "Unit": "USD"
          },
          "TimeUnit": "MONTHLY",
          "TimePeriod": {
            "Start": "$(date -d 'first day of this month' '+%Y-%m-%d')T00:00:00Z",
            "End": "2030-12-31T23:59:59Z"
          },
          "BudgetType": "COST",
          "CostFilters": {
            "TagKey": ["Environment"],
            "TagValue": ["$ENVIRONMENT"]
          }
        }
        EOF
        
        # Create notification subscribers
        cat > budget-subscribers.json << EOF
        [
          {
            "SubscriptionType": "EMAIL",
            "Address": "${{ secrets.NOTIFICATION_EMAIL || 'admin@webapp-demo.com' }}"
          }
        ]
        EOF
        
        # Create budget notifications
        cat > budget-notifications.json << EOF
        [
          {
            "Notification": {
              "NotificationType": "ACTUAL",
              "ComparisonOperator": "GREATER_THAN",
              "Threshold": 80,
              "ThresholdType": "PERCENTAGE"
            },
            "Subscribers": $(cat budget-subscribers.json)
          },
          {
            "Notification": {
              "NotificationType": "FORECASTED",
              "ComparisonOperator": "GREATER_THAN",
              "Threshold": 100,
              "ThresholdType": "PERCENTAGE"
            },
            "Subscribers": $(cat budget-subscribers.json)
          }
        ]
        EOF
        
        # Create or update budget
        aws budgets put-budget \
          --account-id $(aws sts get-caller-identity --query Account --output text) \
          --budget file://budget-policy.json \
          --notifications-with-subscribers file://budget-notifications.json || \
        echo "‚ö†Ô∏è Budget creation failed - may already exist"
        
        echo "BUDGET_NAME=$BUDGET_NAME" >> $GITHUB_ENV
    
    - name: üìä Create CloudWatch dashboards
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        DASHBOARD_NAME="webapp-demo-$ENVIRONMENT-dashboard"
        
        echo "üìä Creating CloudWatch dashboard: $DASHBOARD_NAME"
        
        # Create dashboard configuration
        cat > dashboard-config.json << EOF
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "webapp-demo-api-$ENVIRONMENT" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${{ env.AWS_REGION }}",
                "title": "Lambda Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBClusterIdentifier", "webapp-demo-$ENVIRONMENT" ],
                  [ ".", "DatabaseConnections", ".", "." ],
                  [ ".", "ServerlessDatabaseCapacity", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${{ env.AWS_REGION }}",
                "title": "RDS Aurora Serverless Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "webapp-demo-api-$ENVIRONMENT" ],
                  [ ".", "Latency", ".", "." ],
                  [ ".", "4XXError", ".", "." ],
                  [ ".", "5XXError", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${{ env.AWS_REGION }}",
                "title": "API Gateway Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            }
          ]
        }
        EOF
        
        # Create dashboard
        aws cloudwatch put-dashboard \
          --dashboard-name $DASHBOARD_NAME \
          --dashboard-body file://dashboard-config.json
        
        echo "DASHBOARD_NAME=$DASHBOARD_NAME" >> $GITHUB_ENV
    
    - name: üö® Setup CloudWatch alarms
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        echo "üö® Setting up CloudWatch alarms..."
        
        # Lambda error rate alarm
        aws cloudwatch put-metric-alarm \
          --alarm-name "webapp-demo-$ENVIRONMENT-lambda-errors" \
          --alarm-description "High error rate in Lambda function" \
          --metric-name Errors \
          --namespace AWS/Lambda \
          --statistic Sum \
          --period 300 \
          --threshold 5 \
          --comparison-operator GreaterThanThreshold \
          --dimensions Name=FunctionName,Value=webapp-demo-api-$ENVIRONMENT \
          --evaluation-periods 2 \
          --alarm-actions arn:aws:sns:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):webapp-demo-alerts || \
        echo "‚ö†Ô∏è Lambda alarm creation failed - SNS topic may not exist"
        
        # API Gateway latency alarm
        aws cloudwatch put-metric-alarm \
          --alarm-name "webapp-demo-$ENVIRONMENT-api-latency" \
          --alarm-description "High latency in API Gateway" \
          --metric-name Latency \
          --namespace AWS/ApiGateway \
          --statistic Average \
          --period 300 \
          --threshold 5000 \
          --comparison-operator GreaterThanThreshold \
          --dimensions Name=ApiName,Value=webapp-demo-api-$ENVIRONMENT \
          --evaluation-periods 3 \
          --alarm-actions arn:aws:sns:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):webapp-demo-alerts || \
        echo "‚ö†Ô∏è API Gateway alarm creation failed - SNS topic may not exist"
        
        # RDS CPU utilization alarm
        aws cloudwatch put-metric-alarm \
          --alarm-name "webapp-demo-$ENVIRONMENT-rds-cpu" \
          --alarm-description "High CPU utilization in RDS" \
          --metric-name CPUUtilization \
          --namespace AWS/RDS \
          --statistic Average \
          --period 300 \
          --threshold 80 \
          --comparison-operator GreaterThanThreshold \
          --dimensions Name=DBClusterIdentifier,Value=webapp-demo-$ENVIRONMENT \
          --evaluation-periods 2 \
          --alarm-actions arn:aws:sns:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):webapp-demo-alerts || \
        echo "‚ö†Ô∏è RDS alarm creation failed - SNS topic may not exist"
    
    - name: üì± Setup SNS notification topic
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        TOPIC_NAME="webapp-demo-alerts"
        
        echo "üì± Setting up SNS notification topic: $TOPIC_NAME"
        
        # Check if topic exists
        TOPIC_ARN=$(aws sns list-topics \
          --query "Topics[?contains(TopicArn, '$TOPIC_NAME')].TopicArn" \
          --output text)
        
        if [ -z "$TOPIC_ARN" ] || [ "$TOPIC_ARN" = "None" ]; then
          echo "üÜï Creating SNS topic..."
          TOPIC_ARN=$(aws sns create-topic \
            --name $TOPIC_NAME \
            --query 'TopicArn' \
            --output text)
        else
          echo "‚úÖ SNS topic already exists: $TOPIC_ARN"
        fi
        
        # Subscribe email to topic (if provided)
        EMAIL="${{ secrets.NOTIFICATION_EMAIL }}"
        if [ -n "$EMAIL" ]; then
          echo "üìß Subscribing email to SNS topic..."
          aws sns subscribe \
            --topic-arn $TOPIC_ARN \
            --protocol email \
            --notification-endpoint $EMAIL || \
          echo "‚ö†Ô∏è Email subscription failed - may already exist"
        fi
        
        echo "TOPIC_ARN=$TOPIC_ARN" >> $GITHUB_ENV
    
    - name: üìä Setup log insights queries
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        echo "üìä Creating CloudWatch Insights queries..."
        
        # Create useful log insights queries
        cat > log-insights-queries.json << EOF
        {
          "lambda_errors": {
            "name": "Lambda Errors - $ENVIRONMENT",
            "query": "fields @timestamp, @message | filter @message like /ERROR/ | sort @timestamp desc | limit 100",
            "logGroups": ["/aws/lambda/webapp-demo-api-$ENVIRONMENT"]
          },
          "api_gateway_errors": {
            "name": "API Gateway 5XX Errors - $ENVIRONMENT",
            "query": "fields @timestamp, @message | filter status >= 500 | sort @timestamp desc | limit 50",
            "logGroups": ["API-Gateway-Execution-Logs_*/stage"]
          },
          "performance_analysis": {
            "name": "Performance Analysis - $ENVIRONMENT",
            "query": "fields @timestamp, @duration | filter @type = \"REPORT\" | stats avg(@duration), max(@duration), min(@duration) by bin(5m)",
            "logGroups": ["/aws/lambda/webapp-demo-api-$ENVIRONMENT"]
          }
        }
        EOF
        
        echo "üìã Log Insights queries configured"
    
    - name: üîß Setup X-Ray tracing
      if: ${{ github.event.inputs.enable_detailed_monitoring == 'true' }}
      run: |
        echo "üîß Enabling X-Ray tracing..."
        
        # Note: X-Ray tracing needs to be enabled at the Lambda function level
        # This would typically be done during function deployment
        
        echo "‚ö†Ô∏è X-Ray tracing configuration:"
        echo "- Enable tracing in Lambda function configuration"
        echo "- Add X-Ray SDK to application code"
        echo "- Configure service map in X-Ray console"
        echo "- Additional cost: ~\$0.005 per trace"
    
    - name: üìã Generate monitoring summary
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        
        cat > monitoring-summary.md << EOF
        # üìä Monitoring Setup Summary
        
        **Environment**: $ENVIRONMENT
        **Region**: ${{ env.AWS_REGION }}

        **Budget Limit**: \$${{ github.event.inputs.budget_limit }}/month

        **Timestamp**: $(date)
        
        ## üí∞ Budget Monitoring
        - **Budget Name**: ${BUDGET_NAME}

        - **Monthly Limit**: \$${{ github.event.inputs.budget_limit }}

        - **Alert Thresholds**: 80% (actual), 100% (forecasted)
        - **Notification Email**: ${{ secrets.NOTIFICATION_EMAIL || 'Not configured' }}
        
        ## üìä CloudWatch Dashboard
        - **Dashboard Name**: ${DASHBOARD_NAME}
        - **URL**: https://${{ env.AWS_REGION }}.console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#dashboards:name=${DASHBOARD_NAME}
        - **Widgets**: Lambda metrics, RDS metrics, API Gateway metrics
        
        ## üö® CloudWatch Alarms
        - **Lambda Errors**: > 5 errors in 10 minutes
        - **API Latency**: > 5000ms average over 15 minutes
        - **RDS CPU**: > 80% average over 10 minutes
        - **Notification Topic**: ${TOPIC_ARN:-'Not configured'}
        
        ## üìä Log Insights Queries
        - **Lambda Errors**: Ready to use query for error investigation
        - **API Gateway 5XX**: Query for server errors
        - **Performance Analysis**: Duration and performance metrics
        
        ## üîß Additional Monitoring Features
        - **X-Ray Tracing**: ${{ github.event.inputs.enable_detailed_monitoring == 'true' && 'Enabled' || 'Disabled' }}
        - **Detailed Monitoring**: ${{ github.event.inputs.enable_detailed_monitoring == 'true' && 'Enabled (+cost)' || 'Standard (free tier)' }}
        
        ## üîÑ Next Steps
        1. Confirm email subscription for SNS alerts
        2. Test alarm notifications
        3. Customize dashboard widgets as needed
        4. Set up application-level metrics
        5. Configure log retention policies
        
        ## üí° Cost Optimization Tips
        - CloudWatch Logs: Set retention period (default: never expire)
        - CloudWatch Metrics: Use custom metrics sparingly
        - X-Ray: Enable only in production for detailed tracing
        - Dashboards: Free tier includes 3 dashboards
        
        ## üì± Useful AWS Console Links
        - [CloudWatch Dashboard](https://${{ env.AWS_REGION }}.console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#dashboards:name=${DASHBOARD_NAME})
        - [Budget Details](https://console.aws.amazon.com/billing/home#/budgets)
        - [CloudWatch Alarms](https://${{ env.AWS_REGION }}.console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#alarmsV2:)
        - [Log Insights](https://${{ env.AWS_REGION }}.console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#logsV2:logs-insights)
        
        EOF
        
        echo "‚úÖ Monitoring setup completed!"
    
    - name: üíæ Upload monitoring artifacts

      uses: actions/upload-artifact@v4

      with:
        name: monitoring-${{ github.event.inputs.environment }}-${{ github.run_id }}
        path: |
          monitoring-summary.md
          *.json
        retention-days: 90
    
    - name: üì¢ Setup completion notification
      run: |
        echo "üéâ Monitoring setup completed successfully!"
        echo "üìä Dashboard: ${DASHBOARD_NAME}"

        echo "üí∞ Budget: ${BUDGET_NAME} (\$${{ github.event.inputs.budget_limit }}/month)"

        echo "üö® Alarms: Configured for Lambda, API Gateway, and RDS"
        echo "üì± Notifications: ${TOPIC_ARN:-'Configure email subscription manually'}"
        echo "‚ö° Free tier optimized for cost efficiency"